#!/bin/bash
# runB3
#
export HOME="/home/pi"
# Wait for /dev/ttyACM0 and /dev/ttyACM1 to be present
counter=0
while [ ! -e /dev/ttyACM0 ]; do
    sleep 100
    counter=$((counter + 1))
    if [ $counter -ge 50 ]; then
        exit
    fi
done
sudo chmod 777 /dev/ttyACM0
counter=0
while [ ! -e /dev/ttyACM1 ]; do
    sleep 100
    counter=$((counter + 1))
    if [ $counter -ge 50 ]; then
        exit
    fi
done
sudo chmod 777 /dev/ttyACM1
#
# launch JACK audio server daemon
# jackd -d <audio-interface-backend>
/usr/bin/jackd -Rd alsa &
sleep 5
#
#
# start the B3 emulator
/opt/setbfree/bin/setBfree -p /home/pi/.config/setBfree/setbfree.pgm -c /home/pi/.config/setBfree/setbfree.cfg -d  &
sleep 5
#
#
# build a MIDI port from a COM one
# ttymidi -s <serial-device> -n <alsa-midi-client-name> 
/usr/local/bin/ttymidi -s /dev/ttyACM0 -n kb_out -v &
sleep 1
/usr/local/bin/ttymidi -s /dev/ttyACM1 -n db_out -v &
sleep 1
#
#
# Alsa to Jack MIDI Daemon
# for every ALSA sequencer port, we get one Jack MIDI port
# a2jmidid -e (also export MIDI hardware ports, not only software)
#          -u (ommit the numeric ALSA client ID so that jack_connect
#              can always use the same a2j output name)
/usr/bin/a2jmidid -e -u &
sleep 2
#
#
# connect keyboards control board to setBfree
/usr/bin/jack_connect 'a2j:kb_out (capture): MIDI out'  'setBfree:midi_in' &
sleep 1
#
# connect drawbars control board to setBfree
/usr/bin/jack_connect 'a2j:db_out (capture): MIDI out'  'setBfree:midi_in' &
sleep 1
#
# connect virtual MIDI port to setBfree (to allow both RPIs to send MIDI messages
# to setBfree when displayed buttons are pressed). Actually, only the RPI UP sends
# MIDI messages to setBfree; the RPI LO communicates with the RPI HI through TCP.
# The RPI LO does not send any MIDI message.
/usr/bin/jack_connect 'a2j:Virtual Raw MIDI 1-0 (capture): VirMIDI 1-0' 'setBfree:midi_in' &
sleep 1
#
#
#
# Ready !!!
